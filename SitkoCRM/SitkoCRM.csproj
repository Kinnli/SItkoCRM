<Project Sdk="Microsoft.NET.Sdk.Web">

    <PropertyGroup>
        <TargetFramework>netcoreapp2.2</TargetFramework>
        <LangVersion>7.1</LangVersion>
        <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>
        <UserSecretsId>844ef31d-74e5-4473-8a97-adea8f00367d</UserSecretsId>
        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
        <DockerComposeProjectPath>..\docker-compose.dcproj</DockerComposeProjectPath>
        <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
        <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
        <IsPackable>false</IsPackable>
        <SpaRoot>ClientApp\</SpaRoot>
        <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="AWSSDK.S3" Version="3.3.102.12"/>
        <PackageReference Include="FluentValidation" Version="8.4.0"/>
        <PackageReference Include="JetBrains.Annotations" Version="2019.1.1"/>
        <PackageReference Include="Microsoft.AspNetCore.App"/>
        <PackageReference Include="Microsoft.AspNetCore.Razor.Design" Version="2.2.0" PrivateAssets="All"/>
        <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.2.4"/>
        <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.7.9"/>
        <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="2.2.3"/>
        <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="2.2.4"/>
        <PackageReference Include="Scrutor" Version="3.0.2"/>
        <PackageReference Include="Serilog.Extensions.Logging" Version="2.0.4"/>
        <PackageReference Include="Serilog.Sinks.File" Version="4.0.0"/>
        <PackageReference Include="Swashbuckle.AspNetCore" Version="4.0.1"/>
        <PackageReference Include="System.Linq.Dynamic.Core" Version="1.0.16"/>
    </ItemGroup>

    <ItemGroup>
        <!-- Don't publish the SPA source files, but do show them in the project files list -->
        <Content Remove="$(SpaRoot)**"/>
        <Content Include="ClientApp\tsconfig.json"/>
        <Content Include="ClientApp\tslint.json"/>
        <None Remove="$(SpaRoot)**"/>
        <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**"/>
    </ItemGroup>

    <ItemGroup>
        <Folder Include="Migrations"/>
    </ItemGroup>

    <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
        <!-- Ensure Node.js is installed -->
        <Exec Command="node --version" ContinueOnError="true">
            <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
        </Exec>
        <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE."/>
        <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..."/>
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install"/>
    </Target>

    <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
        <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm install"/>
        <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build"/>

        <!-- Include the newly-built files in the publish output -->
        <ItemGroup>
            <DistFiles Include="$(SpaRoot)build\**; $(SpaRoot)build-ssr\**"/>
            <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
                <RelativePath>%(DistFiles.Identity)</RelativePath>
                <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
            </ResolvedFileToPublish>
        </ItemGroup>
    </Target>
</Project>
